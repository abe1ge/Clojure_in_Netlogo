<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1460719890785">{:repl-history {:ide [], :local [&quot;(nlogo-send \&quot;hello \&quot;)&quot; &quot;(break \&quot;asdfadanlkjsfakjsdfdnaaj;slkdjfaddnaadsf\&quot;)&quot; &quot;(ns clojure-in-netlogo.core)&quot; &quot;(break \&quot;dfjaksjdfadnaakjdsfadnaalkjdsfadna\&quot;)&quot; &quot;(arange [\&quot;+\&quot; \&quot;3\&quot; \&quot;6\&quot;])&quot; &quot;(arange [\&quot;+\&quot; \&quot;4\&quot; \&quot;6\&quot;])&quot; &quot;(first (first [\&quot;df\&quot; \&quot;dfs\&quot;]))&quot; &quot;(arange [\&quot;5\&quot; \&quot;+\&quot; \&quot;6\&quot;])&quot; &quot;[\&quot;1\&quot;]&quot; &quot;[(first \&quot;1\&quot;)]&quot; &quot;(+ 1 3)&quot; &quot;(class +)&quot; &quot;(class (first [\&quot;5\&quot; \&quot;+\&quot; \&quot;9\&quot;]))&quot; &quot;(class str)&quot; &quot;(clojure.core$_PLUS 3 4)&quot; &quot;(+  3 4) &quot; &quot;(call \&quot;zero?\&quot; 1)&quot; &quot;(call \&quot;+\&quot; 1 2)&quot; &quot;(parse-int \&quot;ddf\&quot;)&quot; &quot;(arange [\&quot;5\&quot; \&quot;+\&quot; \&quot;9\&quot;])&quot; &quot;(arange [\&quot;5\&quot; \&quot;*\&quot; \&quot;9\&quot;])&quot; &quot;(arange [\&quot;5\&quot; \&quot;str\&quot; \&quot;9\&quot;])&quot; &quot;((nlogo-read)(nlogo-read)(nlogo-read))&quot; &quot;(call (nlogo-read)(nlogo-read)(nlogo-read))&quot; &quot;(println (nlogo-read))&quot; &quot;(class (nlogo-read))&quot; &quot;(nlogo-send (call (nlogo-read)(nlogo-read)(nlogo-read)))&quot; &quot;(exit)&quot; &quot;(listen)&quot; &quot;(light)&quot; &quot;(listen (nlogo-read))&quot; &quot;(arange)&quot; &quot;(light (nlogo-read))&quot; &quot;(online? 2222)&quot; &quot;(online? 2223)&quot; &quot;(if (socket-input-waiting) \&quot;true\&quot; \&quot;false\&quot;)&quot; &quot;(if (socket-input-waiting shrdlu-comms) \&quot;true\&quot; \&quot;false\&quot;)&quot; &quot;(if shrdlu-comms)&quot; &quot;(if shrdlu-comms \&quot;true\&quot; \&quot;false\&quot;)&quot; &quot;(split \&quot;hello my name is\&quot; #\&quot; \&quot;)&quot; &quot;(startup 2223)&quot; &quot;(split \&quot;hello\&quot; \&quot;l\&quot;)&quot; &quot;(use [clojure.string :only (split)])&quot; &quot;(exec1 \&quot;+ 1 2\&quot;)&quot; &quot;(str (first [\&quot;+\&quot; 1 2]))&quot; &quot;(exec1 [+ 1 2])&quot; &quot;(exec1 [\&quot;+\&quot; 1 2])&quot; &quot;(let [x [+ 1 2]]\n  (apply call (first x) (rest x))\n  )&quot; &quot;(let [x [\&quot;+\&quot; 1 2]]\n  (apply call (first x) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  x\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (apply first x)\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (first x)\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (str (first x))\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (apply str (first x))\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (string? (first x))\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [\&quot;+\&quot; 1 2]]\n  (string? (first x))\n  ;(apply call (apply str (first x)) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  ((first x) (rest x))\n  )&quot; &quot;(let [x [+ 1 2]]\n  (apply (first x) (rest x))\n  )&quot; &quot;(exec1 [\&quot;+\&quot; 2 3])&quot; &quot;(exec1 [+ 2 3])&quot; &quot;(class (first [+ 1 2]))&quot; &quot;(/ 1 0)&quot; &quot;(try \n(/ 1 0)&quot; &quot;((try\n   (/ 1 0)\n   (catch Exception e\n     )))&quot; &quot;((try\n\n   (catch Exception e\n     ))&quot; &quot;(try\n  (/ 1 0)\n  (catch Exception e\n    ))&quot; &quot;(try\n  (/ 1 0)\n  (catch js/Object e \n    (.log js/console e)\n    ))&quot; &quot;(try\n  (/ 1 0)\n  (catch Exception e \n    (str \&quot;caught exception: \&quot; (.getMessage e))\n    ))&quot; &quot;(nlogo-read)&quot; &quot;shrdlu-comms&quot; &quot;(startup 2222)&quot; &quot;(exec1 (reading))&quot; &quot;(nlogo-io-waiting)&quot; &quot;(use '[clojure.string :only (split)])&quot; &quot;(split \&quot;fuck the police\&quot; #\&quot; \&quot;)&quot; &quot;(online?)&quot;], :remote []}}</component>
</project>